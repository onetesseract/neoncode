// automatically generated by the FlatBuffers compiler, do not modify
extern crate flatbuffers;
use std::mem;
use std::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum frame_mapOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct frame_map<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for frame_map<'a> {
    type Inner = frame_map<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self { _tab: flatbuffers::Table { buf, loc } }
    }
}

impl<'a> frame_map<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        frame_map { _tab: table }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args frame_mapArgs<'args>) -> flatbuffers::WIPOffset<frame_map<'bldr>> {
      let mut builder = frame_mapBuilder::new(_fbb);
      builder.add_start_index(args.start_index);
      if let Some(x) = args.constant_indexes { builder.add_constant_indexes(x); }
      if let Some(x) = args.variables { builder.add_variables(x); }
      builder.finish()
    }

    pub const VT_START_INDEX: flatbuffers::VOffsetT = 4;
    pub const VT_VARIABLES: flatbuffers::VOffsetT = 6;
    pub const VT_CONSTANT_INDEXES: flatbuffers::VOffsetT = 8;

  #[inline]
  pub fn start_index(&self) -> u64 {
    self._tab.get::<u64>(frame_map::VT_START_INDEX, Some(0)).unwrap()
  }
  #[inline]
  pub fn variables(&self) -> Option<variables_type<'a>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<variables_type>>(frame_map::VT_VARIABLES, None)
  }
  #[inline]
  pub fn constant_indexes(&self) -> Option<flatbuffers::Vector<'a, u64>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u64>>>(frame_map::VT_CONSTANT_INDEXES, None)
  }
}

impl flatbuffers::Verifiable for frame_map<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u64>("start_index", Self::VT_START_INDEX, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<variables_type>>("variables", Self::VT_VARIABLES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u64>>>("constant_indexes", Self::VT_CONSTANT_INDEXES, false)?
     .finish();
    Ok(())
  }
}
pub struct frame_mapArgs<'a> {
    pub start_index: u64,
    pub variables: Option<flatbuffers::WIPOffset<variables_type<'a>>>,
    pub constant_indexes: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u64>>>,
}
impl<'a> Default for frame_mapArgs<'a> {
    #[inline]
    fn default() -> Self {
        frame_mapArgs {
            start_index: 0,
            variables: None,
            constant_indexes: None,
        }
    }
}
pub struct frame_mapBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> frame_mapBuilder<'a, 'b> {
  #[inline]
  pub fn add_start_index(&mut self, start_index: u64) {
    self.fbb_.push_slot::<u64>(frame_map::VT_START_INDEX, start_index, 0);
  }
  #[inline]
  pub fn add_variables(&mut self, variables: flatbuffers::WIPOffset<variables_type<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<variables_type>>(frame_map::VT_VARIABLES, variables);
  }
  #[inline]
  pub fn add_constant_indexes(&mut self, constant_indexes: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(frame_map::VT_CONSTANT_INDEXES, constant_indexes);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> frame_mapBuilder<'a, 'b> {
    let start = _fbb.start_table();
    frame_mapBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<frame_map<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl std::fmt::Debug for frame_map<'_> {
  fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
    let mut ds = f.debug_struct("frame_map");
      ds.field("start_index", &self.start_index());
      ds.field("variables", &self.variables());
      ds.field("constant_indexes", &self.constant_indexes());
      ds.finish()
  }
}
