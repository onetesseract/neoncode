// automatically generated by the FlatBuffers compiler, do not modify
extern crate flatbuffers;
use std::mem;
use std::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum function_mapOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct function_map<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for function_map<'a> {
    type Inner = function_map<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self { _tab: flatbuffers::Table { buf, loc } }
    }
}

impl<'a> function_map<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        function_map { _tab: table }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args function_mapArgs<'args>) -> flatbuffers::WIPOffset<function_map<'bldr>> {
      let mut builder = function_mapBuilder::new(_fbb);
      builder.add_entry_frame_index(args.entry_frame_index);
      if let Some(x) = args.variables { builder.add_variables(x); }
      builder.finish()
    }

    pub const VT_VARIABLES: flatbuffers::VOffsetT = 4;
    pub const VT_ENTRY_FRAME_INDEX: flatbuffers::VOffsetT = 6;

  #[inline]
  pub fn variables(&self) -> Option<variables_type<'a>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<variables_type>>(function_map::VT_VARIABLES, None)
  }
  #[inline]
  pub fn entry_frame_index(&self) -> u64 {
    self._tab.get::<u64>(function_map::VT_ENTRY_FRAME_INDEX, Some(0)).unwrap()
  }
}

impl flatbuffers::Verifiable for function_map<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<variables_type>>("variables", Self::VT_VARIABLES, false)?
     .visit_field::<u64>("entry_frame_index", Self::VT_ENTRY_FRAME_INDEX, false)?
     .finish();
    Ok(())
  }
}
pub struct function_mapArgs<'a> {
    pub variables: Option<flatbuffers::WIPOffset<variables_type<'a>>>,
    pub entry_frame_index: u64,
}
impl<'a> Default for function_mapArgs<'a> {
    #[inline]
    fn default() -> Self {
        function_mapArgs {
            variables: None,
            entry_frame_index: 0,
        }
    }
}
pub struct function_mapBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> function_mapBuilder<'a, 'b> {
  #[inline]
  pub fn add_variables(&mut self, variables: flatbuffers::WIPOffset<variables_type<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<variables_type>>(function_map::VT_VARIABLES, variables);
  }
  #[inline]
  pub fn add_entry_frame_index(&mut self, entry_frame_index: u64) {
    self.fbb_.push_slot::<u64>(function_map::VT_ENTRY_FRAME_INDEX, entry_frame_index, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> function_mapBuilder<'a, 'b> {
    let start = _fbb.start_table();
    function_mapBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<function_map<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl std::fmt::Debug for function_map<'_> {
  fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
    let mut ds = f.debug_struct("function_map");
      ds.field("variables", &self.variables());
      ds.field("entry_frame_index", &self.entry_frame_index());
      ds.finish()
  }
}
